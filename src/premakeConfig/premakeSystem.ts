import Module from "module";
import { ModuleConfig, ModuleUtility } from "modules/moduleUtils";
import { version } from "os";

const Notice = "-- This is an auto generated file anw wil be regenerated by premake-manager! \n -- Use the premake5"

/**
 * @brief class to generate the premake5 system script file
 */
class premakeSystemGenerator {
    systemScript : string = Notice;

    constructor(modules: ModuleConfig[]) {

    }

    /**
     * embedds all the module configs in to 1 string
     * @param modules configiration list
     * @returns string containing all the embedded modules.
     */
    private addModules(modules: ModuleConfig[]) :string {
        let section : string = "";
        section += "-- start of modules loading section \n";
        section += `print(\"loading modules(${modules.length})\") \n`;
        modules.forEach((module) => {
            section += this.addModule(module); // Calling this.addModule for each module
        });
    
        section += "-- end of modules loading section\n";
        return section
    }
    /**
     * Converts the module to a set of lua functions to later embed in the premake-system.lua
     * @param module configuration to add.
     */
    private addModule(module : ModuleConfig) {
        let section : string = "";
        let moduleVersion = this.extractVersion(module.version ?? "");
        let name = ModuleUtility.extractRepositoryName(module.git ?? "");
        if(moduleVersion) {
            section += `print(\" - ${name}: ${moduleVersion} \") \n`
            section += `require(\"modules/${name}\",\"${module.version}}\") \n`
        } else {
            section += `print(\" - ${name} \") \n`
            section += `require(\"modules/${name}\") \n`
        }
    }
    /**
     * Extracts the minimum version from the version string
     * @param version string either "","*",">=5.0.0"
     * @returns 
     */
    private extractVersion(version: string): string | null {
        // Regular expressions to match "x.x.x" and ">=x.x.x"
        const exactVersionRegex = /^\d+\.\d+\.\d+$/; // Matches "x.x.x"
        const greaterThanVersionRegex = /^>=\d+\.\d+\.\d+$/; // Matches ">=x.x.x"
    
        if (exactVersionRegex.test(version)) {
            // Match exact version format "x.x.x"
            return version;
        } else if (greaterThanVersionRegex.test(version)) {
            // Match ">=x.x.x" and extract the version number
            return version.slice(2); // Remove the ">=" prefix
        }
    
        // Return null if no match
        return null;
    }
    
}